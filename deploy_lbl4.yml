---
- name: Create L4 TCP Load Balancer using openstack.cloud 2.4.1 (no CLI)
  hosts: localhost
  gather_facts: no
  collections:
    - openstack.cloud

  vars:
    cloud_name: openstack
    lb_name: awx-test-lb-l4-corretto
    lb_vip_subnet: "d126b00a-8fab-48b4-bc55-0f05c6aacc8e"
    listener_name: tcp-listener
    listener_port: 8080
    pool_name: tcp-pool
    lb_algorithm: ROUND_ROBIN
    lb_members:
      - address: 10.0.0.11
        protocol_port: 8080
      - address: 10.0.0.12
        protocol_port: 8080

  tasks:

    - name: Ensure no existing load balancer (cleanup)
      openstack.cloud.loadbalancer:
        cloud: "{{ cloud_name }}"
        name: "{{ lb_name }}"
        state: absent
      ignore_errors: yes

    - name: Create Load Balancer (Amphora provider assumed)
      openstack.cloud.loadbalancer:
        cloud: "{{ cloud_name }}"
        name: "{{ lb_name }}"
        vip_subnet: "{{ lb_vip_subnet }}"
        state: present
        wait: yes
        timeout: 800

    - name: Create TCP Listener
      openstack.cloud.lb_listener:
        cloud: "{{ cloud_name }}"
        load_balancer: "{{ lb_name }}"
        name: "{{ listener_name }}"
        protocol: TCP
        protocol_port: "{{ listener_port }}"
        state: present
        wait: yes
        timeout: 120

    - name: Create TCP Pool
      openstack.cloud.lb_pool:
        cloud: "{{ cloud_name }}"
        listener: "{{ listener_name }}"
        name: "{{ pool_name }}"
        protocol: TCP
        lb_algorithm: "{{ lb_algorithm }}"
        state: present
        wait: yes
        timeout: 120

    - name: Add pool members one by one with wait for ACTIVE state
      vars:
        delay_between_members: 10
      with_items: "{{ lb_members }}"
      loop_control:
        loop_var: member
      tasks:
        - name: Add member to pool
          openstack.cloud.lb_member:
            cloud: "{{ cloud_name }}"
            pool: "{{ pool_name }}"
            name: "member-{{ member.address }}-{{ member.protocol_port }}"
            address: "{{ member.address }}"
            protocol_port: "{{ member.protocol_port }}"
            subnet_id: "{{ lb_vip_subnet }}"
            state: present

        - name: Wait for Load Balancer to return ACTIVE
          openstack.cloud.loadbalancer_info:
            cloud: "{{ cloud_name }}"
            name: "{{ lb_name }}"
          register: lb_status
          until: lb_status.loadbalancers[0].provisioning_status == "ACTIVE"
          retries: 30
          delay: "{{ delay_between_members }}"

    - name: Retrieve Load Balancer info using OpenStack SDK (no CLI)
      ansible.builtin.command: >
        python3 -c "import openstack, json;
        conn=openstack.connect(cloud='{{ cloud_name }}');
        lb=conn.load_balancer.find_load_balancer('{{ lb_name }}');
        import sys;
        sys.exit(1) if not lb else None;
        full=conn.load_balancer.get_load_balancer(lb);
        print(json.dumps({'name': full.name, 'vip_address': full.vip_address, 'vip_port_id': full.vip_port_id, 'id': full.id}))"
      register: lb_info_json
      changed_when: false
      failed_when: lb_info_json.rc != 0

    - name: Parse SDK output
      ansible.builtin.set_fact:
        lb_data: "{{ lb_info_json.stdout | from_json }}"

    - name: Set output facts for workflow
      ansible.builtin.set_fact:
        lb_output:
          name: "{{ lb_data.name }}"
          vip_port_id: "{{ lb_data.vip_port_id }}"
          vip_address: "{{ lb_data.vip_address }}"
          id: "{{ lb_data.id }}"

    - name: Print LB info for workflow output
      ansible.builtin.debug:
        msg:
          - "âœ… Load Balancer creato con successo!"
          - "Nome: {{ lb_output.name }}"
          - "VIP Address: {{ lb_output.vip_address }}"
          - "VIP Port ID: {{ lb_output.vip_port_id }}"
