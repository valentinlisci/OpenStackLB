---
- name: Create Amphora Load Balancer using Ansible and Octavia
  hosts: localhost
  gather_facts: no
  collections:
    - openstack.cloud

  vars:
    cloud_name: openstack

    # --- Load Balancer parameters ---
    lb_name: awx-test-lb
    lb_description: "Load Balancer created via Ansible using Amphora provider"
    lb_vip_subnet: 22a9d3ec-e3b6-485d-b0da-3f9a169a3ac1
    lb_provider: amphora
    lb_algorithm: ROUND_ROBIN

    # --- Listener parameters ---
    listener_name: awx-test-listener
    listener_protocol: HTTP
    listener_port: 80

    # --- Pool parameters ---
    pool_name: awx-test-pool
    pool_protocol: HTTP

    # --- Member parameters ---
    lb_members:
      - { address: 10.0.0.11, protocol_port: 80 }
      - { address: 10.0.0.12, protocol_port: 80 }

  tasks:

    ######################################################################
    # 1️⃣  Pulizia ambiente preesistente
    ######################################################################
    - name: Delete existing Load Balancer if present
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer delete --cascade {{ lb_name }}
      failed_when: false
      changed_when: false
      ignore_errors: true

    ######################################################################
    # 2️⃣  Creazione del Load Balancer
    ######################################################################
    - name: Create Load Balancer (Amphora provider)
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer create
          --name {{ lb_name }}
          --vip-subnet-id {{ lb_vip_subnet }}
          --provider {{ lb_provider }}
          --description "{{ lb_description }}"
      register: lb_result
      changed_when: "'Created' in lb_result.stdout or lb_result.rc == 0"

    - name: Wait for Load Balancer to become ACTIVE
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer show {{ lb_name }} -f value -c provisioning_status
      register: lb_status
      until: lb_status.stdout.strip() == "ACTIVE"
      retries: 30
      delay: 5

    ######################################################################
    # 3️⃣  Creazione del Listener
    ######################################################################
    - name: Create Listener for HTTP traffic
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer listener create
          --protocol {{ listener_protocol }}
          --protocol-port {{ listener_port }}
          --name {{ listener_name }}
          {{ lb_name }}
      register: listener_result
      changed_when: "'Created' in listener_result.stdout or listener_result.rc == 0"

    - name: Wait for Listener to become ACTIVE
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer listener show {{ listener_name }} -f value -c provisioning_status
      register: listener_status
      until: listener_status.stdout.strip() == "ACTIVE"
      retries: 20
      delay: 5

    ######################################################################
    # 4️⃣  Creazione del Pool
    ######################################################################
    - name: Create Pool for Load Balancer
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer pool create
          --listener {{ listener_name }}
          --protocol {{ pool_protocol }}
          --lb-algorithm {{ lb_algorithm }}
          --name {{ pool_name }}
      register: pool_result
      changed_when: "'Created' in pool_result.stdout or pool_result.rc == 0"

    - name: Wait for Pool to become ACTIVE
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer pool show {{ pool_name }} -f value -c provisioning_status
      register: pool_status
      until: pool_status.stdout.strip() == "ACTIVE"
      retries: 20
      delay: 5

    ######################################################################
    # 5️⃣  Creazione dei membri
    ######################################################################
    - name: Add pool members to Pool
      loop: "{{ lb_members }}"
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer member create
          --subnet {{ lb_vip_subnet }}
          --address {{ item.address }}
          --protocol-port {{ item.protocol_port }}
          {{ pool_name }}
      register: member_result
      changed_when: "'Created' in member_result.stdout or member_result.rc == 0"

    ######################################################################
    # 6️⃣  Output finale
    ######################################################################
    - name: Retrieve Load Balancer details
      ansible.builtin.command:
        cmd: >
          openstack --os-cloud {{ cloud_name }}
          loadbalancer show {{ lb_name }}
      register: lb_info

    - name: Print final summary
      ansible.builtin.debug:
        msg: |
          ✅ Amphora Load Balancer created successfully!
          ---
          Name: {{ lb_name }}
          Provider: {{ lb_provider }}
          Subnet: {{ lb_vip_subnet }}
          Algorithm: {{ lb_algorithm }}
          Listener: {{ listener_name }}
          Pool: {{ pool_name }}
          Members: {{ lb_members | map(attribute='address') | list }}
          ---
          {{ lb_info.stdout }}
